#!/usr/bin/python -W ignore

import argparse

import pyexcel as pe
import pyexcel.ext.xls
import pyexcel.ext.xlsx
import pyexcel.ext.ods

class grepxcel():
    def __init__(self, book_file, pattern, separator, output_row_number,
        output_sheet_name):
        self.book_file = book_file
        self.pattern = pattern
        self.separator = separator
        self.output_row_number = output_row_number
        self.output_sheet_name = output_sheet_name

    def run(self):
        book = pe.load_book(self.book_file)

        # Iterate through all sheets in the book.
        for sheet in book.sheets.keys():
            sheet_name = book[sheet].name

            # The grep itself begins here.
            for row in book[sheet]:
                row_string = unicode()

                for cell in row:
                    cell_string = unicode(cell)
                    if cell_string:
                        row_string += cell_string + self.separator

                if row_string:
                    if self.pattern in row_string:
                        # Output the result, based on the options set
                        # by the user.
                        result = unicode()

                        if self.output_sheet_name:
                            result += unicode('%s:' % sheet_name)

                        if self.output_row_number:
                            result += '%d:' % book[sheet].array.index(row)

                        result += row_string
                        print result

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', metavar='<string>',
        help='Use <string> as separator between cells.', type=str,
        default=' ')
    parser.add_argument('-r', help='Output row number.', action='store_true')
    parser.add_argument('-n', help='Output sheet name.', action='store_true')
    parser.add_argument('pattern', metavar='<pattern>',
        help='Pattern to search for.', type=str)
    parser.add_argument('file', metavar='<filename>',
        help='File to search.', type=str)

    args = parser.parse_args()

    g = grepxcel(args.file, args.pattern, args.s, args.r, args.n)
    g.run()
